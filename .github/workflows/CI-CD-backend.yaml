name: CI-CD Backend Pipeline

on:
  workflow_dispatch:

jobs:
  ci-cd-backend:
    runs-on: ubuntu-latest

    env:
      WORKING_DIRECTORY: ./5_days_in_the_clouds_2024-api

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Set up EF Core CLI
        run: dotnet tool install --global dotnet-ef

      - name: Add EF Core CLI to PATH
        run: echo "${{ github.workspace }}/.dotnet/tools" >> $GITHUB_PATH

      - name: Replace connection string
        run: |
          CONNECTION_STRING="Server=tcp:my-mssql-db.crsemig2yms8.eu-central-1.rds.amazonaws.com,1433;Initial Catalog=appDb;Persist Security Info=False;User ID=adminuser;Password=${{ secrets.DB_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;"
          jq --arg conn "$CONNECTION_STRING" '.ConnectionStrings.DefaultConnection = $conn' \
          ${{ env.WORKING_DIRECTORY }}/5_days_in_the_clouds_2024.API/appsettings.Development.json > tmp.json && \
          mv tmp.json ${{ env.WORKING_DIRECTORY }}/5_days_in_the_clouds_2024.API/appsettings.Development.json

      - name: Install NuGet packages
        run: dotnet restore ${{ env.WORKING_DIRECTORY }}/5_days_in_the_clouds_2024.API/5_days_in_the_clouds_2024.API.csproj

      - name: Build main project
        run: dotnet build ${{ env.WORKING_DIRECTORY }}/5_days_in_the_clouds_2024.API/5_days_in_the_clouds_2024.API.csproj --configuration Release

      - name: Publish application
        run: dotnet publish ${{ env.WORKING_DIRECTORY }}/5_days_in_the_clouds_2024.API/5_days_in_the_clouds_2024.API.csproj --configuration Release --output ${{ env.WORKING_DIRECTORY }}/publish --self-contained true -r linux-x64

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-publish
          path: ${{ env.WORKING_DIRECTORY }}/publish

      - name: Configure Aws Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Apply EF Core migrations
        run: |
          echo "Applying EF Core migrationsâ€¦"
          dotnet ef database update --project ${{ env.WORKING_DIRECTORY }}/5_days_in_the_clouds_2024.API/5_days_in_the_clouds_2024.API.csproj --connection "Server=tcp:my-mssql-db.crsemig2yms8.eu-central-1.rds.amazonaws.com,1433;Initial Catalog=appDb;Persist Security Info=False;User ID=adminuser;Password=${{ secrets.DB_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;"

      - name: Copy files to ec2 instance
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh

          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

          ssh -i ssh_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          if systemctl list-units --type=service | grep -q myapi.service; then
            sudo systemctl stop myapi
          fi
          rm -rf ~/5_days_in_the_clouds_2024/*
          '
          echo "Files removed from remote server"

          scp -i ssh_key.pem -r ${{ env.WORKING_DIRECTORY }}/publish/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/5_days_in_the_clouds_2024
          echo "Files copied to remote server"

          scp -i ssh_key.pem ${{ env.WORKING_DIRECTORY }}/5_days_in_the_clouds_2024.API/myapi.service ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/5_days_in_the_clouds_2024/
          echo "Service file copied to remote server"

          ssh -i ssh_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
           sudo cp ~/5_days_in_the_clouds_2024/myapi.service /etc/systemd/system/
           sudo chmod +x ~/5_days_in_the_clouds_2024/5_days_in_the_clouds_2024.API
           sudo systemctl daemon-reload
           sudo systemctl enable myapi
           sudo systemctl restart myapi
          '
          echo "Service restarted on remote server"
